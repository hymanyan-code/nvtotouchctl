<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TouchControlPad.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TouchControlPad.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Apr 22 23:14:44 2025
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
hal_task &rArr; HalAdcConverteFlow &rArr; HalAdc1Callback &rArr; calculate_temperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[1d]">BPWM0_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[1e]">BPWM1_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[1f]">BRAKE0_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[20]">BRAKE1_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[19]">CAN0_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[1a]">CAN1_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[23]">CKD_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[c]">Default_Handler</a> from startup_m0518.o(.text) referenced 2 times from startup_m0518.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[1b]">PWM0_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[1c]">PWM1_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[21]">PWRWU_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[28]">ProcessHardFault</a> from main.o(i.ProcessHardFault) referenced from startup_m0518.o(.text)
 <LI><a href="#[24]">RTC_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[38]">Reset_Handler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[29]">SH_Return</a> from retarget.o(i.SH_Return) referenced from startup_m0518.o(.text)
 <LI><a href="#[13]">SPI0_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from cpu.o(i.SysTick_Handler) referenced from startup_m0518.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_m0518.o(i.SystemInit) referenced from startup_m0518.o(.text)
 <LI><a href="#[d]">TMR0_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[e]">TMR1_IRQHandler</a> from hal_timer.o(i.TMR1_IRQHandler) referenced from startup_m0518.o(RESET)
 <LI><a href="#[f]">TMR2_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[10]">TMR3_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[11]">UART02_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[14]">UART3_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[15]">UART4_IRQHandler</a> from portserial.o(i.UART4_IRQHandler) referenced from startup_m0518.o(RESET)
 <LI><a href="#[16]">UART5_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_m0518.o(.text) referenced from startup_m0518.o(RESET)
 <LI><a href="#[27]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m0518.o(.text)
 <LI><a href="#[36]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadHoldingRegister) referenced from mb.o(.data)
 <LI><a href="#[37]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister) referenced from mb.o(.data)
 <LI><a href="#[2e]">eMBRTUReceive</a> from mbrtu.o(i.eMBRTUReceive) referenced from mb.o(i.eMBInit)
 <LI><a href="#[2d]">eMBRTUSend</a> from mbrtu.o(i.eMBRTUSend) referenced from mb.o(i.eMBInit)
 <LI><a href="#[2b]">eMBRTUStart</a> from mbrtu.o(i.eMBRTUStart) referenced from mb.o(i.eMBInit)
 <LI><a href="#[2c]">eMBRTUStop</a> from mbrtu.o(i.eMBRTUStop) referenced from mb.o(i.eMBInit)
 <LI><a href="#[2a]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[32]">hal_CPU_Critical_Control</a> from cpu.o(i.hal_CPU_Critical_Control) referenced from cpu.o(i.hal_CPUInit)
 <LI><a href="#[33]">hal_beep_off</a> from hal_beep.o(i.hal_beep_off) referenced from hal_task.o(i.hal_task_init)
 <LI><a href="#[34]">hal_task</a> from hal_task.o(i.hal_task) referenced from main.o(i.main)
 <LI><a href="#[25]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[35]">mt_task</a> from mt_task.o(i.mt_task) referenced from main.o(i.main)
 <LI><a href="#[2f]">xMBRTUReceiveFSM</a> from mbrtu.o(i.xMBRTUReceiveFSM) referenced from mb.o(i.eMBInit)
 <LI><a href="#[31]">xMBRTUTimerT35Expired</a> from mbrtu.o(i.xMBRTUTimerT35Expired) referenced from mb.o(i.eMBInit)
 <LI><a href="#[30]">xMBRTUTransmitFSM</a> from mbrtu.o(i.xMBRTUTransmitFSM) referenced from mb.o(i.eMBInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[56]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[de]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[df]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[e2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[38]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_m0518.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CKD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_m0518.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[3a]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_m0518.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[e3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_ConfigOutputChannel
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CoreClockInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcFilter
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcConverteFlow
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdc1Callback
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdc1Callback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdc1Callback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHoldingRegs
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdc1Callback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdc1Callback
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdc1Callback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHoldingRegs
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[e9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ea]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[40]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[49]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[48]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[54]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ec]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[ed]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>ADC_Open</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, adc.o(i.ADC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcInit
</UL>

<P><STRONG><a name="[58]"></a>BPWM_ConfigOutputChannel</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, bpwm.o(i.BPWM_ConfigOutputChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperStart
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalSetStepperSpeed
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperInit
</UL>

<P><STRONG><a name="[93]"></a>BPWM_DisableOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bpwm.o(i.BPWM_DisableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperStop
</UL>

<P><STRONG><a name="[90]"></a>BPWM_EnableOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bpwm.o(i.BPWM_EnableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperStart
</UL>

<P><STRONG><a name="[91]"></a>BPWM_Start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bpwm.o(i.BPWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperStart
</UL>

<P><STRONG><a name="[94]"></a>BPWM_Stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bpwm.o(i.BPWM_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperStop
</UL>

<P><STRONG><a name="[9b]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[5b]"></a>CLK_EnablePLL</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[9a]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[61]"></a>CLK_SetCoreClock</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[62]"></a>CLK_SetHCLK</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[9c]"></a>CLK_SetModuleClock</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[5c]"></a>CLK_WaitClockReady</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[63]"></a>DEBUG_UART1_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.DEBUG_UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DEBUG_UART1_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>Delayus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, user_misc.o(i.Delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SendByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_ReceiveAck
</UL>

<P><STRONG><a name="[66]"></a>DriverI2C_ReceiveAck</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, driver_i2c.o(i.DriverI2C_ReceiveAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DriverI2C_ReceiveAck &rArr; Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SDA_READ
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SDA_HIGH
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SCL_LOW
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SCL_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
</UL>

<P><STRONG><a name="[69]"></a>DriverI2C_SCL_HIGH</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, driver_i2c.o(i.DriverI2C_SCL_HIGH))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SendByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_ReceiveAck
</UL>

<P><STRONG><a name="[6b]"></a>DriverI2C_SCL_LOW</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, driver_i2c.o(i.DriverI2C_SCL_LOW))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SendByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_ReceiveAck
</UL>

<P><STRONG><a name="[67]"></a>DriverI2C_SDA_HIGH</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, driver_i2c.o(i.DriverI2C_SDA_HIGH))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SendByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_ReceiveAck
</UL>

<P><STRONG><a name="[6d]"></a>DriverI2C_SDA_LOW</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, driver_i2c.o(i.DriverI2C_SDA_LOW))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SendByte
</UL>

<P><STRONG><a name="[6a]"></a>DriverI2C_SDA_READ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, driver_i2c.o(i.DriverI2C_SDA_READ))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_ReceiveAck
</UL>

<P><STRONG><a name="[6c]"></a>DriverI2C_SendByte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, driver_i2c.o(i.DriverI2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DriverI2C_SendByte &rArr; Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SDA_LOW
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SDA_HIGH
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SCL_LOW
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SCL_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
</UL>

<P><STRONG><a name="[6e]"></a>DriverI2C_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, driver_i2c.o(i.DriverI2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DriverI2C_Start &rArr; Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SDA_LOW
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SDA_HIGH
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SCL_LOW
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SCL_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
</UL>

<P><STRONG><a name="[6f]"></a>DriverI2C_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, driver_i2c.o(i.DriverI2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DriverI2C_Stop &rArr; Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SDA_LOW
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SDA_HIGH
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SCL_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
</UL>

<P><STRONG><a name="[bb]"></a>EnterCriticalSection</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, portserial.o(i.EnterCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[be]"></a>ExitCriticalSection</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, portserial.o(i.ExitCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[8b]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
</UL>

<P><STRONG><a name="[9f]"></a>FMC_EnableConfigUpdate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_EnableConfigUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[88]"></a>FMC_GetBootSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fmc.o(i.FMC_GetBootSource))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
</UL>

<P><STRONG><a name="[86]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
</UL>

<P><STRONG><a name="[70]"></a>FMC_ReadConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fmc.o(i.FMC_ReadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_ReadConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[8a]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fmc.o(i.FMC_ReadDataFlashBaseAddr))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
</UL>

<P><STRONG><a name="[72]"></a>FMC_WriteConfig</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fmc.o(i.FMC_WriteConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
</UL>

<P><STRONG><a name="[73]"></a>FillDataPattern</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hal_iflash.o(i.FillDataPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FillDataPattern &rArr; FMC_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_io_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_beep_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_LedConfig
</UL>

<P><STRONG><a name="[79]"></a>HalAdc1Callback</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, mt_modbus.o(i.HalAdc1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HalAdc1Callback &rArr; calculate_temperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcConverteFlow
</UL>

<P><STRONG><a name="[7c]"></a>HalAdcConverteFlow</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, hal_adc.o(i.HalAdcConverteFlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HalAdcConverteFlow &rArr; HalAdc1Callback &rArr; calculate_temperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcFilter
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdc1Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task
</UL>

<P><STRONG><a name="[7d]"></a>HalAdcInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_adc.o(i.HalAdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HalAdcInit &rArr; ADC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
</UL>

<P><STRONG><a name="[7f]"></a>HalDac1SetVoltage</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, hal_dac.o(i.HalDac1SetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HalDac1SetVoltage &rArr; DriverI2C_SendByte &rArr; Delayus
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Stop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_Start
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_SendByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverI2C_ReceiveAck
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
</UL>

<P><STRONG><a name="[a9]"></a>HalGetStepperSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_stepper.o(i.HalGetStepperSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHoldingRegs
</UL>

<P><STRONG><a name="[84]"></a>HalIflashInit</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, hal_iflash.o(i.HalIflashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HalIflashInit &rArr; FlashTest &rArr; VerifyData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadDataFlashBaseAddr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_GetBootSource
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
</UL>

<P><STRONG><a name="[8c]"></a>HalSetStepperSpeed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_stepper.o(i.HalSetStepperSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HalSetStepperSpeed &rArr; BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_ConfigOutputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
</UL>

<P><STRONG><a name="[a8]"></a>HalStepperGetDir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_stepper.o(i.HalStepperGetDir))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHoldingRegs
</UL>

<P><STRONG><a name="[a7]"></a>HalStepperGetStepState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_stepper.o(i.HalStepperGetStepState))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHoldingRegs
</UL>

<P><STRONG><a name="[8d]"></a>HalStepperInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_stepper.o(i.HalStepperInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HalStepperInit &rArr; BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_ConfigOutputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
</UL>

<P><STRONG><a name="[ab]"></a>HalStepperSetDir</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_stepper.o(i.HalStepperSetDir))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
</UL>

<P><STRONG><a name="[8f]"></a>HalStepperStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_stepper.o(i.HalStepperStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HalStepperStart &rArr; BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_EnableOutput
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_ConfigOutputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
</UL>

<P><STRONG><a name="[92]"></a>HalStepperStop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_stepper.o(i.HalStepperStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HalStepperStop
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_Stop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_DisableOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
</UL>

<P><STRONG><a name="[97]"></a>ModbusRegistersInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mt_modbus.o(i.ModbusRegistersInit))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MtModbusInit
</UL>

<P><STRONG><a name="[95]"></a>MtModbusInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mt_modbus.o(i.MtModbusInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = MtModbusInit &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRegistersInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt_task_init
</UL>

<P><STRONG><a name="[c5]"></a>OS_CPUInterruptCBSRegister</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_system.o(i.OS_CPUInterruptCBSRegister))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CPUInit
</UL>

<P><STRONG><a name="[a0]"></a>OS_ClockInterruptHandle</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, os_system.o(i.OS_ClockInterruptHandle))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d4]"></a>OS_CreatTask</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_system.o(i.OS_CreatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_CreatTask
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>OS_Start</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_system.o(i.OS_Start))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>OS_TaskInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_system.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>ProcessHardFault</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, main.o(i.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ProcessHardFault &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>SH_Return</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.SH_Return))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>SYS_Init</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>SYS_ResetModule</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_UART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[9d]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[9e]"></a>SendChar_ToUART</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClockInterruptHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_m0518.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_ConfigOutputChannel
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_m0518.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[a3]"></a>TIMER_Open</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer1Config
</UL>

<P><STRONG><a name="[e]"></a>TMR1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_timer.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR1_IRQHandler &rArr; Hal_TimerHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_TimerHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, portserial.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART_Open</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_UART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[da]"></a>UART_Read</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, uart.o(i.UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>

<P><STRONG><a name="[a5]"></a>UART_SetLine_Config</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, uart.o(i.UART_SetLine_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
</UL>

<P><STRONG><a name="[dc]"></a>UART_Write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart.o(i.UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
</UL>

<P><STRONG><a name="[78]"></a>VerifyData</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, hal_iflash.o(i.VerifyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VerifyData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
</UL>

<P><STRONG><a name="[ac]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ee]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[76]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[ef]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f0]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[53]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d7]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[7b]"></a>calculate_temperature</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, mt_modbus.o(i.calculate_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = calculate_temperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdc1Callback
</UL>

<P><STRONG><a name="[98]"></a>eMBEnable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBEnable &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MtModbusInit
</UL>

<P><STRONG><a name="[36]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB &rArr; WtiteHoldingRegs &rArr; HalStepperStart &rArr; BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB &rArr; WtiteHoldingRegs &rArr; HalStepperStart &rArr; BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>eMBInit</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, mb.o(i.eMBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MtModbusInit
</UL>

<P><STRONG><a name="[b8]"></a>eMBPoll</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt_task
</UL>

<P><STRONG><a name="[b6]"></a>eMBRTUInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[2e]"></a>eMBRTUReceive</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUReceive &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[2d]"></a>eMBRTUSend</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mbrtu.o(i.eMBRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRTUSend &rArr; usMBCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBCRC16
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[2b]"></a>eMBRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBRTUStart &rArr; vMBPortTimersEnable &rArr; hal_ResetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[2c]"></a>eMBRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu.o(i.eMBRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBRTUStop &rArr; vMBPortTimersDisable &rArr; hal_ResetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[b4]"></a>eMBRegHoldingCB</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, mt_modbus.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = eMBRegHoldingCB &rArr; WtiteHoldingRegs &rArr; HalStepperStart &rArr; BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WtiteHoldingRegs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHoldingRegs
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[2a]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[c3]"></a>hal_CPUInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu.o(i.hal_CPUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_CPUInit &rArr; hal_CoreClockInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPUInterruptCBSRegister
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CoreClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>hal_CPU_Critical_Control</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cpu.o(i.hal_CPU_Critical_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_CPU_Critical_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_getprimask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cpu.o(i.hal_CPUInit)
</UL>
<P><STRONG><a name="[d2]"></a>hal_CreatTimer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_timer.o(i.hal_CreatTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_CreatTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortTimersInit
</UL>

<P><STRONG><a name="[c9]"></a>hal_LedHandle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_led.o(i.hal_LedHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_LedHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_Led1Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task
</UL>

<P><STRONG><a name="[cb]"></a>hal_LedInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_led.o(i.hal_LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_LedInit &rArr; hal_LedConfig &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_LedConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
</UL>

<P><STRONG><a name="[cc]"></a>hal_MatrixtimerInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_timer.o(i.hal_MatrixtimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_MatrixtimerInit &rArr; hal_timer1Config &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_timer1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
</UL>

<P><STRONG><a name="[d8]"></a>hal_ResetTimer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_timer.o(i.hal_ResetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>

<P><STRONG><a name="[ce]"></a>hal_beep_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_beep.o(i.hal_beep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_beep_init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
</UL>

<P><STRONG><a name="[33]"></a>hal_beep_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_beep.o(i.hal_beep_off))
<BR>[Address Reference Count : 1]<UL><LI> hal_task.o(i.hal_task_init)
</UL>
<P><STRONG><a name="[d1]"></a>hal_beep_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_beep.o(i.hal_beep_on))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
</UL>

<P><STRONG><a name="[cf]"></a>hal_io_init</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, hal_io.o(i.hal_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_io_init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
</UL>

<P><STRONG><a name="[34]"></a>hal_task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_task.o(i.hal_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = hal_task &rArr; HalAdcConverteFlow &rArr; HalAdc1Callback &rArr; calculate_temperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcConverteFlow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_LedHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d0]"></a>hal_task_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_task.o(i.hal_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = hal_task_init &rArr; HalStepperInit &rArr; BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_io_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_beep_on
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_beep_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_MatrixtimerInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CreatTimer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_LedInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = main &rArr; mt_task_init &rArr; MtModbusInit &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt_task_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_task_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CPUInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreatTask
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_UART1_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[35]"></a>mt_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mt_task.o(i.mt_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mt_task &rArr; eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d5]"></a>mt_task_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mt_task.o(i.mt_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mt_task_init &rArr; MtModbusInit &rArr; eMBInit &rArr; eMBRTUInit &rArr; xMBPortSerialInit &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MtModbusInit
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>prveMBError2Exception</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[b3]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_temperature
</UL>

<P><STRONG><a name="[bf]"></a>usMBCRC16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbcrc.o(i.usMBCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUReceive
</UL>

<P><STRONG><a name="[c0]"></a>vMBPortSerialEnable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, portserial.o(i.vMBPortSerialEnable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUSend
</UL>

<P><STRONG><a name="[c2]"></a>vMBPortTimersDisable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBPortTimersDisable &rArr; hal_ResetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStop
</UL>

<P><STRONG><a name="[c1]"></a>vMBPortTimersEnable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, porttimer.o(i.vMBPortTimersEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBPortTimersEnable &rArr; hal_ResetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUStart
</UL>

<P><STRONG><a name="[b9]"></a>xMBPortEventGet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[b7]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBInit
</UL>

<P><STRONG><a name="[ba]"></a>xMBPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTimerT35Expired
</UL>

<P><STRONG><a name="[d9]"></a>xMBPortSerialGetByte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, portserial.o(i.xMBPortSerialGetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBPortSerialGetByte &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUReceiveFSM
</UL>

<P><STRONG><a name="[bc]"></a>xMBPortSerialInit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, portserial.o(i.xMBPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xMBPortSerialInit &rArr; UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[db]"></a>xMBPortSerialPutByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, portserial.o(i.xMBPortSerialPutByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBPortSerialPutByte &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBRTUTransmitFSM
</UL>

<P><STRONG><a name="[bd]"></a>xMBPortTimersInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, porttimer.o(i.xMBPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xMBPortTimersInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CreatTimer
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRTUInit
</UL>

<P><STRONG><a name="[2f]"></a>xMBRTUReceiveFSM</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, mbrtu.o(i.xMBRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xMBRTUReceiveFSM &rArr; xMBPortSerialGetByte &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersEnable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[31]"></a>xMBRTUTimerT35Expired</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTimerT35Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBRTUTimerT35Expired &rArr; vMBPortTimersDisable &rArr; hal_ResetTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortTimersDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL>
<P><STRONG><a name="[30]"></a>xMBRTUTransmitFSM</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mbrtu.o(i.xMBRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xMBRTUTransmitFSM &rArr; xMBPortSerialPutByte &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortSerialPutByte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPortSerialEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBInit)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m0518.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m0518.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, system_m0518.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[5f]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, main.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, bpwm.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPWM_ConfigOutputChannel
</UL>

<P><STRONG><a name="[5d]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[71]"></a>FMC_Read</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fmc.o(i.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
</UL>

<P><STRONG><a name="[60]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
</UL>

<P><STRONG><a name="[c7]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cpu.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CoreClockInit
</UL>

<P><STRONG><a name="[c4]"></a>hal_CoreClockInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cpu.o(i.hal_CoreClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_CoreClockInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CPUInit
</UL>

<P><STRONG><a name="[c6]"></a>hal_getprimask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cpu.o(i.hal_getprimask))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_CPU_Critical_Control
</UL>

<P><STRONG><a name="[ca]"></a>hal_Led1Turn</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_led.o(i.hal_Led1Turn))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_LedHandle
</UL>

<P><STRONG><a name="[c8]"></a>hal_LedConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_led.o(i.hal_LedConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_LedConfig &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_LedInit
</UL>

<P><STRONG><a name="[a4]"></a>Hal_TimerHandle</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, hal_timer.o(i.Hal_TimerHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Hal_TimerHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>hal_timer1Config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hal_timer.o(i.hal_timer1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_timer1Config &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_MatrixtimerInit
</UL>

<P><STRONG><a name="[57]"></a>AdcFilter</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, hal_adc.o(i.AdcFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AdcFilter &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAdcConverteFlow
</UL>

<P><STRONG><a name="[77]"></a>FMC_Erase</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hal_iflash.o(i.FMC_Erase))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataFlashBase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
</UL>

<P><STRONG><a name="[89]"></a>FMC_Read</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal_iflash.o(i.FMC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
</UL>

<P><STRONG><a name="[74]"></a>FMC_Write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_iflash.o(i.FMC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDataPattern
</UL>

<P><STRONG><a name="[75]"></a>FlashTest</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, hal_iflash.o(i.FlashTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FlashTest &rArr; VerifyData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillDataPattern
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
</UL>

<P><STRONG><a name="[85]"></a>SYS_UnlockReg</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_iflash.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
</UL>

<P><STRONG><a name="[87]"></a>SetDataFlashBase</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, hal_iflash.o(i.SetDataFlashBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetDataFlashBase &rArr; FMC_WriteConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadDataFlashBaseAddr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_EnableConfigUpdate
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalIflashInit
</UL>

<P><STRONG><a name="[a6]"></a>UpdateHoldingRegs</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, mt_modbus.o(i.UpdateHoldingRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdateHoldingRegs &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperGetStepState
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperGetDir
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalGetStepperSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[aa]"></a>WtiteHoldingRegs</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, mt_modbus.o(i.WtiteHoldingRegs))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = WtiteHoldingRegs &rArr; HalStepperStart &rArr; BPWM_ConfigOutputChannel &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDac1SetVoltage
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperStop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperStart
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalStepperSetDir
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalSetStepperSpeed
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[ae]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ad]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b1]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b0]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
